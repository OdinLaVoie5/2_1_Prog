# linebreaks_restore.py     –ú–û–ñ–ï–¢ –†–ê–ë–û–¢–ê–¢–¨ –ù–ï –ö–û–†–ï–ö–¢–ù–û  ??
from difflib import ndiff, SequenceMatcher
from collections import Counter
from typing import List, Tuple, Dict, Callable, Union


# ======= –°–û–°–¢–ê–í–õ–Ø–ï–ú –ö–ê–†–¢–£ –ü–ï–†–ï–ù–û–°–û–í =======
def words_and_map(text: str) -> Tuple[List[str], List[int]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (words, word_map).
    word_map —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–∑–∏—Ü–∏–∏ (—á–∏—Å–ª–æ —Å–ª–æ–≤ –¥–æ –ø–µ—Ä–µ–Ω–æ—Å–∞), –Ω–∞–ø—Ä–∏–º–µ—Ä [3, 6].
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–µ—Ä–µ–Ω–æ—Å—ã –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω '\n'.
    """
    text = text.replace('\r\n', '\n').replace('\r', '\n')
    # –¥–µ–ª–∞–µ–º '\n' –æ—Ç–¥–µ–ª—å–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º, –∑–∞—Ç–µ–º split –ø–æ –æ–¥–∏–Ω–æ—á–Ω–æ–º—É –ø—Ä–æ–±–µ–ª—É,
    # —á—Ç–æ–±—ã –Ω–µ —Ç–µ—Ä—è—Ç—å –º–∞—Ä–∫–µ—Ä—ã '\n'
    spaced = text.replace('\n', ' \n ')
    parts = spaced.split(' ')  # split(' ') —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—É—Å—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–≤
    tokens = [p for p in parts if p != '']  # —É–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º '\n'
    words = []
    word_map = []
    wcount = 0
    for t in tokens:
        if t == '\n':
            # –ø–µ—Ä–µ–Ω–æ—Å –ø–æ—Å–ª–µ wcount —Å–ª–æ–≤ (—Ç–æ –µ—Å—Ç—å –º–µ–∂–¥—É wcount-1 –∏ wcount)
            word_map.append(wcount)
        else:
            words.append(t)
            wcount += 1
    return words, word_map

def _ensure_list_words(out) -> List[str]:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤."""
    if isinstance(out, list):
        return out
    if isinstance(out, str):
        return out.split()
    # –ª—é–±–∞—è –∏—Ç–µ—Ä–∏—Ä—É–µ–º–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    return list(out)

def try_process(before_words: List[str], processor: Callable) -> List[str]:
    out = processor(' '.join(before_words))
    return _ensure_list_words(out)


def map_boundaries(before: List[str], after: List[str], positions: List[int], context: int = 3) -> List[int]:
    """
    –ë–æ–ª–µ–µ —É—Å—Ç–æ–π—á–∏–≤–∞—è –∫–∞—Ä—Ç–∞ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤:
      - –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏ pos –≤ `before` –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤ `after` –∏–Ω–¥–µ–∫—Å j,
        –≥–¥–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è (–∫–∞–∫ –º–æ–∂–Ω–æ —Ç–æ—á–Ω–µ–µ) —Ä–∞–∑—Ä—ã–≤ –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏.
      - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç (context —Å–ª–æ–≤ —Å–ª–µ–≤–∞ –∏ —Å–ø—Ä–∞–≤–∞) –¥–ª—è –≤—ã–±–æ—Ä–∞ –ª—É—á—à–µ–≥–æ j.
      - –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ.
      - –≤ –∫–æ–Ω—Ü–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –≤–æ–∑—Ä–∞—Å—Ç–∞—é—â—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥—É–±–ª–µ–π.
    """
    B = len(before)
    A = len(after)
    if B == 0:
        # –µ—Å–ª–∏ –¥–æ –±—ã–ª–æ –ø—É—Å—Ç–æ ‚Äî –≤—Å–µ –ø–µ—Ä–µ–Ω–æ—Å—ã –Ω–∞ 0..A
        return [min(pos, A) for pos in positions]

    scale = A / B if B else 1.0
    mapped = []

    # —É–¥–æ–±–Ω—ã–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –ª—è–º–±–¥—ã
    def left_context(pos):
        i0 = max(0, pos - context)
        return before[i0:pos]

    def right_context(pos):
        i1 = min(B, pos + context)
        return before[pos:i1]

    for pos in positions:
        # –∫—Ä–∞–π–Ω–∏–µ —Å–ª—É—á–∞–∏
        if pos <= 0:
            mapped.append(0)
            continue
        if pos >= B:
            mapped.append(A)
            continue

        left = left_context(pos)
        right = right_context(pos)

        best_j = None
        best_score = -1
        # –æ—Ü–µ–Ω–æ—á–Ω—ã–π —Ü–µ–Ω—Ç—Ä ‚Äî –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
        est_center = int(round(pos * scale))

        # –ø—Ä–æ–±–µ–≥–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã j (–º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏ –≤ after: 0..A)
        # –¥–ª—è –∫–∞–∂–¥–æ–≥–æ j —Å—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ —Å–æ–≤–ø–∞–ª–æ —Å–ª–µ–≤–∞/—Å–ø—Ä–∞–≤–∞ –ø–æ–¥—Ä—è–¥ (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å)
        for j in range(0, A + 1):
            # –ø–æ–¥—Å—á—ë—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å–ª–µ–≤–∞ (—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –∏–∑ left —Å–æ–≤–ø–∞–¥–∞—é—Ç –ø–æ–¥—Ä—è–¥, —Å—á–∏—Ç–∞—è —Å –∫–æ–Ω—Ü–∞)
            left_match = 0
            for k in range(1, len(left) + 1):
                if j - k < 0:
                    break
                if after[j - k] == left[-k]:
                    left_match += 1
                else:
                    break

            # –ø–æ–¥—Å—á—ë—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å–ø—Ä–∞–≤–∞ (—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –∏–∑ right —Å–æ–≤–ø–∞–¥–∞—é—Ç –ø–æ–¥—Ä—è–¥, —Å—á–∏—Ç–∞—è —Å –Ω–∞—á–∞–ª–∞)
            right_match = 0
            for k in range(0, len(right)):
                if j + k >= A:
                    break
                if after[j + k] == right[k]:
                    right_match += 1
                else:
                    break

            score = left_match + right_match

            # –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –±–æ–ª—å—à–µ–º—É score; –ø—Ä–∏ —Ä–∞–≤–µ–Ω—Å—Ç–≤–µ ‚Äî –±–ª–∏–∂–µ –∫ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
            dist = abs(j - est_center)
            if score > best_score or (score == best_score and (best_j is None or dist < abs(best_j - est_center))):
                best_score = score
                best_j = j

        # –µ—Å–ª–∏ –≤–æ–æ–±—â–µ –Ω–∏—á—Ç–æ –Ω–µ —Å–æ–≤–ø–∞–ª–æ, fallback –Ω–∞ –ø—Ä–æ–ø–æ—Ä—Ü–∏—é
        if best_score <= 0:
            j_est = int(round(pos * scale))
        else:
            j_est = best_j

        # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
        j_est = max(0, min(A, j_est))
        mapped.append(j_est)

    # –ù–∞–∫–æ–Ω–µ—Ü ‚Äî –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–≥–æ –Ω–µ —É–±—ã–≤–∞—é—â—É—é (–≤–æ–∑—Ä–∞—Å—Ç–∞—é—â—É—é) –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    cleaned = []
    prev = -1
    for m in mapped:
        if m <= prev:
            m = prev + 1
        if m > A:
            m = A
        cleaned.append(m)
        prev = m

    # –£–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥—É–±–ª–∏ (–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫)
    result = []
    last = None
    for x in cleaned:
        if last is None or x != last:
            result.append(x)
            last = x

    return result


def restorelinebreaks_from_words(words: List[str], word_map: List[int]) -> str:
    counts = Counter(word_map)
    lines = []
    # –ø–µ—Ä–µ–Ω–æ—Å—ã –≤ –Ω–∞—á–∞–ª–µ (–µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏ 0)
    for _ in range(counts.get(0, 0)):
        lines.append('')
    current = []
    for i, w in enumerate(words, start=1):
        current.append(w)
        c = counts.get(i, 0)
        if c:
            lines.append(' '.join(current))
            for _ in range(c - 1):
                lines.append('')  # –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–Ω–æ—Å–∞—Ö
            current = []
    if current:
        lines.append(' '.join(current))
    # üëá –≤–æ—Ç —ç—Ç–æ –¥–æ–±–∏–≤–∞–µ–º –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–Ω–æ—Å–∞
    if word_map and word_map[-1] == len(words):
        lines.append('')
    return '\n'.join(lines)

# ======= –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø =======
# –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä (–∏–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤)
#  –ø–µ—Ä–µ–¥–µ–ª–∞–ª –Ω–∞ –≤–∞—Ä–∏–∞–Ω—Ç –∏ —Å str  –∏ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (—Å–æ str dj –≥–ª–∞–≤–µ)  –Ω–∞ –≤—Ö–æ–¥–µ?

def linebreaks_restore(
    text: str,
    processor: Union[Callable, List],
) -> Dict:
    """   !!!
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞:
      - —Å—Ç—Ä–æ–∏—Ç –∫–∞—Ä—Ç—É –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ –ø–æ —Å–ª–æ–≤–∞–º,
      - –ø—Ä–æ–≥–æ–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ processor,
      - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç '\n' –ø–æ –∫–∞—Ä—Ç–µ.
    processor –º–æ–∂–µ—Ç –±—ã—Ç—å:
        - Callable
        - list[Callable]
        - list: [func, arg1, arg2, ...] (–ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Ñ—É–Ω–∫—Ü–∏—è, –æ—Å—Ç–∞–ª—å–Ω–æ–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)
    """
    before_words, old_map = words_and_map(text)

    processed = text

    # --- 1. –ø—Ä–æ—Å—Ç–æ–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ ---
    if callable(processor):
        processed = processor(processed)

    # --- 2. —Å–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π –ø–æ–¥—Ä—è–¥ ---
    elif isinstance(processor, list) and all(callable(f) for f in processor):
        for func in processor:
            processed = func(processed)

    # --- 3. —Å–ø–∏—Å–æ–∫ –≤–∏–¥–∞ [func, args...] ---
    elif isinstance(processor, list) and callable(processor[0]):
        func, *args = processor
        kwargs = {}
        # –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —Å–ª–æ–≤–∞—Ä–∏ –∫–∞–∫ kwargs
        for a in args:
            if isinstance(a, dict):
                kwargs.update(a)
        # –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Üí –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        pos_args = [a for a in args if not isinstance(a, dict)]
        processed = func(processed, *pos_args, **kwargs)

    else:
        raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø processor: {type(processor)}")

    # --- –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è ---
    after_words = processed.split()
    new_map = map_boundaries(before_words, after_words, old_map)
    restored = restorelinebreaks_from_words(after_words, new_map)

    diff = list(ndiff(before_words, after_words))
    added   = [w[2:] for w in diff if w.startswith('+ ')]
    removed = [w[2:] for w in diff if w.startswith('- ')]
    saved   = [w[2:] for w in diff if w.startswith('  ')]

    report = {
        "restored": restored, 
        'before_words': before_words,
        'after_words': after_words,
        'old_map': old_map,
        'new_map': new_map,
        "diff_raw": diff,
        "added": added,
        "removed": removed,
        "saved": saved,
    }

    return report 




if __name__ == "__main__":

    text= """–Ω–∞ —Å–ª–µ—Ç–µ —é–Ω—ã—Ö –∏ –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã—Ö 
–Ω–∞ —Å–ø–æ–ª–∑–µ —Å—Ç–∞—Ä—ã—Ö –∏ –±–æ–ª—å–Ω—ã—Ö 
–Ω–∞ —Å—ä–µ–∑–¥–µ —Ç–µ—Ö –∂–µ –Ω–æ –≤ –∫–æ–ª—è—Å–∫–∞—Ö 
—Ç—Ä–∏–ø—Ç–∏—Ö 
¬© –û–ª–µ–≥–û–ª–µ–≥"""

    # ========== –¢–ï–°–¢–´ ==========
    # # ===== –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã =====

    def expand_25(tokens):
        """–†–∞—Å—à–∏—Ä—è–µ—Ç '25' ‚Üí '–¥–≤–∞–¥—Ü–∞—Ç—å –ø—è—Ç—å'"""
        out = []
        for t in tokens.split():
            if t == "25":
                out.extend(["–¥–≤–∞–¥—Ü–∞—Ç—å", "–ø—è—Ç—å"])
            else:
                out.append(t)
        return " ".join(out)

    def remove_word(tokens):
        """–£–¥–∞–ª—è–µ—Ç '–∂–æ–ø–∞'"""
        return [t for t in tokens if t != "–∂–æ–ø–∞"]

    def identity(tokens):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞–∫ –µ—Å—Ç—å"""
        return tokens

    def monster_processor(tokens):
        """
        –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π:
        - –∑–∞–º–µ–Ω—è–µ—Ç 25 ‚Üí –¥–≤–∞–¥—Ü–∞—Ç—å –ø—è—Ç—å
        - —É–¥–∞–ª—è–µ—Ç X
        """
        out = []
        for t in tokens:
            if t == "25":
                out.extend(["–¥–≤–∞–¥—Ü–∞—Ç—å", "–ø—è—Ç—å"])
            elif t == "X":
                continue
            else:
                out.append(t)
        return out

    print(linebreaks_restore(text, expand_25)["restored"])
