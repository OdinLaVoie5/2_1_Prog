import re
# –≤–∞—Ä–∏–∞–Ω—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ (–≤ —á–∞—Å—Ç–Ω–æ—Å—Ç–∏ –æ—á–∏—Å—Ç–∫–∏) —Ç–µ–∫—Å—Ç–∞ (–Ω–µ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ) 


# === –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Å–ø–µ—Ü-—Ñ—É–Ω–∫—Ü–∏–π ===
def num2words_stub(num_str):
    return f"<{num_str}_NUM>"

def translit_stub(word):
    return f"<{word}_LAT>"

# === –¢–æ–∫–µ–Ω–∞–π–∑–µ—Ä (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π) ===
regex_tokenizer = re.compile(
    r"\d+|"                # —Ü–∏—Ñ—Ä—ã
    r"[a-zA-Z]+|"          # –ª–∞—Ç–∏–Ω–∏—Ü–∞
    r"[–∞-—è–ê-–Ø—ë–Å]+|"        # –∫–∏—Ä–∏–ª–ª–∏—Ü–∞
    r"[.,!?;:\-‚Äì()¬´¬ª\"'‚Ä¶]|"  # –ø—Ä–µ–ø–∏–Ω–∞–∫–∏
    r"[^\w\s]",            # –ø—Ä–æ—á–∏–π –º—É—Å–æ—Ä
    flags=re.UNICODE
)

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===
def handle_token(token, log):
    if token.isdigit():
        log.append(("DIGIT", token))
        return num2words_stub(token)

    elif re.match(r"^[A-Za-z]+$", token):
        log.append(("LATIN", token))
        return translit_stub(token)

    elif re.match(r"^[–∞-—è–ê-–Ø—ë–Å]+$", token):
        return token  # –Ω–æ—Ä–º, –æ—Å—Ç–∞–≤–ª—è–µ–º

    elif re.match(r"^[.,!?;:\-‚Äì()¬´¬ª\"'‚Ä¶]+$", token):
        log.append(("PUNCT", token))
        return token  # –º–æ–∂–Ω–æ —É–¥–∞–ª—è—Ç—å, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ

    else:
        log.append(("GARBAGE", token))
        return ""  # –≤—ã–∫–∏–¥—ã–≤–∞–µ–º

# === –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ===
def clean_text(text):
    tokens = regex_tokenizer.findall(text)
    log = []

    cleaned = [handle_token(t, log) for t in tokens]
    # –°–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ, —É–±–∏—Ä–∞—è –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    result = " ".join([t for t in cleaned if t]).replace(" ,", ",").replace(" .", ".")

    return result.strip(), log

# === –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ===
if __name__ == "__main__":
    poem = """
    –º–Ω–µ 125 –ª–µ—Ç, wifi –Ω–µ –ª–æ–≤–∏—Ç ‚Äî
    –Ω–æ —è —Å–ø–æ–∫–æ–µ–Ω... üòé
    """
    cleaned, log = clean_text(poem)

    print("=== CLEANED TEXT ===")
    print(cleaned)
    print("\n=== LOG ===")
    for entry in log:
        print(f"{entry[0]:<10} {entry[1]}")
