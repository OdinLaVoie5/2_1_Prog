# rhyme.py
import re

VOWELS     = "аэоуяеёюиыАЭОУЯЕЁЮИЫ" 
CONSONANTS = "бвгджзйклмнпрстфхцчшщ"

index=1
mode=2

"""
?????              поменять термины   pretap, tap, posttap,  bigword
в проверке ритма убрать    вплести  extract_rhyme_tail.  изменить её - пусть разбивает строку (согл глас послед)(наст|ро|ен| быст|ро)
указать  add_mode (это дополнительно. более глубокая рифма (умолч-False). РЕЖИМ ЛЕГЧЕ),    main_mode (главное нужное, РЕЖИМ СТРОЖЕ),    post_mode  (РЕЖИМ ЛЕГЧЕ)

   

           ВАРИАНТ I (упрощённый)
Определить другие замены, выпадания ...     ???     

Определить другие родственные буквы     ???   У ЛОГОПЕДОВ  И  ИНОСТРАНЦЕВ  

"""

REPLACES_1       = {    
" ": "", "ъ": "", "ь": "", "й": "",    # удалить пробелы (ОБЪЕДИНЕНИЕ), ъ, ь, й  

# к глухим согласным
"б": "п", "в": "ф", "д": "т",          # зсц гкх жшщч   мн   лр  (й) 
"з": "с", "ц": "с",  "г": "к", "х": "к",   "ж": "ш", "щ": "ш", "ч": "ш",
"м": "н",    "р": "л",  
# к базовым гласным
"я": "а", "э": "е", "ё": "о", "ю": "у", "ы": "и",   # беру базовой е, может правильней э?  "е": "э",  ?

"тс": "ц", "тьс": "ц", "тц": "ц", "тьц": "ц", "цс": "ц",        # т.к. ц=тс      
"тщ": "ч", "тч": "ч", "чщ": "ч",       # т.к. ч=тщ     
}


"""  ???       ВАРИАНТ II (усложнённый)
    Различаются ударные производные гласные ("ая" "эе" "оё" "ую"   "ыи") 
    ь, й  перед согласными и в конце строки сохраняются   
"""
REPLACES_2 = { 
"жё": "жо",            # замены до ОБЪЕДИНЕНИЯ 
"жь": "ж", "шь": "ш", "ць": "ц",       # ж, ш, ц ?  всегда твёрдые  
"щ": "щь", "ч": "чь",                  #   щ,  ч  всегда мягкие
"ться": "ца", "тся": "ца",

" ": "",               # удалить пробелы  ОБЪЕДИНЕНИЕ
"ъ": "",               # удалить твёрдый ъ

# к глухим согласным
"б": "п", "в": "ф", "д": "т",     # зс(ц) гкх? жшщ(ч)   (МН)?  (лр  й)   ^^
"з": "с", "г": "к", "х": "к", "ж": "ш", "щ": "ш",            

# ь + гласные
"ья": "я", "ье": "е", "ьё": "ё", "ью": "ю", "ьи": "и", "ьы": "ы",
"ьа": "я", "ьэ": "е", "ьо": "ё", "ьу": "ю",   

# й + гласные
"йя": "я", "йе": "е", "йё": "ё", "йю": "ю", "йи": "и", "йы": "ы",
"йа": "я", "йэ": "е", "йо": "ё", "йу": "ю",

"тс": "ц", "тьс": "ц", "тц": "ц", "тьц": "ц", "цс": "ц",        # т.к. ц=тс      
"тщ": "ч", "тч": "ч", "чщ": "ч",                   # т.к. ч=тщ     
} 

REPLACES_LIST = {1: REPLACES_1, 2: REPLACES_2}

# мой фономизатор по моему словарю REPLACES     
def fix_with_dict(line: str, mode=2) -> str:
    REPLACES = REPLACES_LIST[mode]
    for old, new in REPLACES.items():
        line = line.replace(old, new)
    return line

# убираем двойные согласные
def remove_doubles_cons(text: str) -> str:
    return re.sub(rf"([{CONSONANTS}])\1+", r"\1", text, flags=re.IGNORECASE)


# выделить рифменный хвост
def extract_rhyme_tail(line, index=1, mode=2):   
    bigword = fix_with_dict(line, mode)     # мой фономизатор 
    bigword = remove_doubles_cons(bigword)  # убираем двойные согласные
    pretap, tap, posttap = "", "", bigword      
    
    k=0
    for i in range(len(bigword)-1, -1, -1):    # справа налево ищем (ударную) гласную        
        if bigword[i] in VOWELS:     # берётся гласная по счётчику с конца строки по index
            k += 1
            if k == index:
                tap = bigword[i]
                posttap = bigword[(i+1):]
                pretap = bigword[i-1] if i > 0 else "" 
                break
       
    return pretap, tap, posttap





#    ПРИ СРАВНЕНИИ двух строк 
# tap и pretap должна быть соответственно одинаковы (с учётом замены по словарю)       
# posttap  -  буквы соответственно одинаковы (с учётом замены по словарю)
#
# posttap  - редукция - если группа согласных (>2 ?), то допустимо одну согласную (?) в середине группы выкинуть или переставить 
# если в posttap есть "ь", то он должен быть в обоих posttap  в одной и той же группе согласных ?? 
#      
#  ль - й  (боль - бой) ?     



"""            ДОПОЛНИТЕЛЬНО
если группа одинаковых букв (3?)        - брак по звуку
если группа из согласных (4?)           - брак по звуку      но: "пространство"  

?? суперрифма пройдет и сравнение i, и сравнение i+1 (и сравнение i-1) (хотя бы в mode=1)
?  сделать более строгий mode 3 - различающий глухие и звонкие согласные (а также мягкие и твёрдые)  - нужно ли?
?  сделать более простой mode 0 - не сравнивать группы согласных (ассонанс)   или группы гласных (конссонанс)     или хотя бы конечные согласные  (пойдёn для больших  index)
"""




if __name__ == "__main__": 
    text = """
	аркадий написал новеллу
	война колбасы и сыры
	и сразу полетели пули
	тцеры"""
    rez = remove_doubles_cons(fix_with_dict(text, mode=2))      
    print(rez)

    print(extract_rhyme_tail(text))
